@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Valhala.Authentication
@using Microsoft.AspNetCore.Components
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<div class="flex w-full justify-center pt-8">
    <img src="images/valhala.svg" class="select-none" />
</div>

<MudNavMenu class="pt-12" Style="display: flex; flex-direction: column; height: 100vh;">
    <!-- Navigation Links Section -->
    @foreach (var link in _links)
    {
        if (link.SubLinks != null)
        {
            <MudNavGroup Icon="@link.Icon" title="@link.Name" Expanded="true">
                @foreach (var subLink in link.SubLinks)
                {
                    if (subLink.Name == "Registar Utilizador")
                    {
                        <MudButton StartIcon="@subLink.Icon" @onclick="OpenUserRegistrationDialog" Style="margin-left: 30px;">
                            @subLink.Name
                        </MudButton>
                    }
                    else if (subLink.Name == "Remover Utilizador")
                    {
                        <MudButton StartIcon="@subLink.Icon" @onclick="OpenUserRemoveDialog" Style="margin-left: 30px;">
                            @subLink.Name
                        </MudButton>
                    }
                }
            </MudNavGroup>
        }
        else
        {
            <MudNavLink Href="@link.Href" Icon="@link.Icon">@link.Name</MudNavLink>
        }
    }

    @if (userSession != null)
    {
        <div class="mb-8" Style="margin-top: auto;">
            <MudMenu Style="width: 100%;">
                <ActivatorContent>
                    <div class="flex items-center">
                        <MudAvatar class="text-white ml-4">
                            @{ var initials = string.Join("", userSession.Name.Split(" ").Select(word => word[0])); @initials }
                        </MudAvatar>
                        <div class="pl-4">
                            <p class="font-semibold">@userSession.Name</p>
                            <p class="text-sm">@userSession.Role</p>
                        </div>
                    </div>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Icon="@Icons.Material.Outlined.Logout" OnClick="Logout">Terminar Sessão</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </div>
    }
</MudNavMenu>


@code {
    class NavLink
    {
        
        public required string Name { get; set; }
        public required string Href { get; set; }
        public required string Icon { get; set; }
        public List<NavLink>? SubLinks { get; set; }
        public bool Expanded { get; set; } = false;
    }

    private List<NavLink> _links = new List<NavLink>();
    private UserSession? userSession;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        var id = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var name = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        var role = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

        if (id != null && name != null && role != null)
        {
            userSession = new UserSession(int.Parse(id), name, role);

            _links = GetUserLinks(role);

        }
        else
        {
            userSession = null;
        }
    }

    private List<NavLink> GetUserLinks(string role)
    {
        switch (role)
        {
            case "Gestor":
                return new List<NavLink>
                {
                    new NavLink { Name = "Catálogo", Href = "/catalog", Icon = Icons.Material.Outlined.Chair },
                    new NavLink { Name = "Encomendas", Href = "/orders", Icon = Icons.Material.Outlined.Inventory2 },
                    new NavLink { Name = "Gestão de Peças", Href = "/parts", Icon = Icons.Material.Outlined.Handyman },
                    new NavLink { Name = "Utilizadores", Href = "/users", Icon = Icons.Material.Outlined.Group, Expanded = true, SubLinks = new List<NavLink>
                    {
                        new NavLink { Name = "Registar Utilizador", Href = "/users/register", Icon = Icons.Material.Outlined.PersonAdd },
                        new NavLink { Name = "Remover Utilizador", Href = "/users/remove", Icon = Icons.Material.Outlined.PersonRemove },
                    }},
                };

            case "Cliente":
                return new List<NavLink>
                {
                    new NavLink { Name = "Catálogo", Href = "/catalog", Icon = Icons.Material.Outlined.Chair },
                    new NavLink { Name = "Encomendas", Href = "/orders", Icon = Icons.Material.Outlined.Inventory2 },
                };

            case "Fornecedor":
                return new List<NavLink>
                {
                    new NavLink { Name = "Catálogo", Href = "/catalog", Icon = Icons.Material.Outlined.Chair },
                    new NavLink { Name = "Gestão de Peças", Href = "/parts", Icon = Icons.Material.Outlined.Handyman },
                };

            case "Funcionario":
                return new List<NavLink>
                {
                    new NavLink { Name = "Catálogo", Href = "/catalog", Icon = Icons.Material.Outlined.Chair },
                    new NavLink { Name = "Encomendas", Href = "/orders", Icon = Icons.Material.Outlined.Inventory2 },
                    new NavLink { Name = "Utilizadores", Href = "/users", Icon = Icons.Material.Outlined.Group },
                };

            default:
                return new List<NavLink>();
        }
    }

    private async Task Logout()
    {
        await ((ValhalaAuthStateProvider)AuthStateProvider).RemoveUserSession();
        NavigationManager.NavigateTo("/", true);
    }

    private void OpenUserRegistrationDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        DialogService.Show<UserRegistrationDialog>("Styling Example Dialog", options);
    }

    private void OpenUserRemoveDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        DialogService.Show<UserRemoveDialog>("Styling Example Dialog", options);
    }

}

