@page "/catalog"
@using System.Security.Claims
@using Valhala.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@using MudBlazor
@using Valhala.Controller.Data
@using Microsoft.AspNetCore.Components
@using Valhala.Controller.UI
@using Valhala.Components.Layout
@using Valhala.Controller.Products

@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

@if (UserRole != null)
{
    <PageTitle>Catálogo</PageTitle>

    <div class="flex justify-between items-center flex-row w-full">
        <MudText Typo="Typo.h4">
            Catálogo
        </MudText>

        @if (IsGestor())
        {   <div class="flex flex-row gap-4">
                <MudFab Color="Color.Dark" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Variant="Variant.Filled"
                    OnClick="NavigateToAddProduct">
                    Adicionar Produto
                </MudFab>
                <MudMenu>
                    <ActivatorContent>
                        <MudButton Color="Color.Dark" EndIcon="@Icons.Material.Filled.ArrowDropDown" Size="Size.Medium" Variant="Variant.Filled" Class="rounded-full">
                            Ordenar
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="@(() => OrderCatalog("pa"))">
                            Preço ascendente
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OrderCatalog("pd"))">
                            Preço descendente
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OrderCatalog("pp"))">
                            Popularidade
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OrderCatalog("a"))">
                            Ordem alfabética
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
        }
    </div>

    <MudPaper class="mt-16" Elevation="3">
        <MudContainer MaxWidth="MaxWidth.Large" style="justify-content: center;">
            <MudGrid class="pt-8">
                @foreach (var produto in Produtos)
                {
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard class="hover:cursor-pointer" Elevation="0" Style="width: 200px; text-align: center; bottom-align:center ;" @onclick="() => VerDetalhes(produto.GetID())">
                            <div style="display: flex; justify-content: center; align-items: center;">
                                <MudImage Src="@produto.GetImagem()" Height="250" Width="250"
                                    Style="border: 1px solid #0D051B; border-radius: 8px;" />
                            </div>
                            <MudCardContent>
                                <MudText Typo="Typo.h6" class="font-semibold">@GetLastWord(produto.GetNome())</MudText>
                                <MudText Typo="Typo.body2">@GetFirstWord(produto.GetNome())</MudText>
                                <MudText Typo="Typo.body2" class="font-bold text-xl">@produto.GetPreco() €</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>

        </MudContainer>
    </MudPaper>

}
<style>
    .white-container {
        background-color: white;
        padding: 16px;
        border-radius: 8px;
    }
</style>



@code {
    private List<Produto> Produtos = new List<Produto>();
    private string? UserRole => userSession?.Role;
    private UserSession? userSession;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        var id = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var name = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        var role = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

        if (id != null && name != null && role != null)
        {
            userSession = new UserSession(int.Parse(id), name, role);
        }
        else
        {
            userSession = null;
        }

        Produtos = ProdutoDAO.GetInstance().ListarProdutos();
        if (IsGestor())
        {
        }
    }

    private bool IsGestor() => userSession?.Role == "Gestor";

    private void NavigateToAddProduct()
    {
        NavManager.NavigateTo("/addProduct"); // Redireciona para a página de adicionar produto
    }

    private void VerDetalhes(int id)
    {
        NavManager.NavigateTo($"/produto/{id}");
    }


    private string GetLastWord(string nome)
    {
        var words = nome.Split(' ');
        return words.LastOrDefault() ?? nome;
    }

    private void OrderCatalog(string order){
        switch(order){
            case "pa":
                Produtos = Produtos.OrderBy(p => p.GetPreco()).ToList();
                break;
            case "pd":
                Produtos = Produtos.OrderByDescending(p => p.GetPreco()).ToList();
                break;
            case "pp":
                Produtos = Produtos.OrderByDescending(p => p.GetVendas()).ToList();
                break;
            case "a":
                Produtos = Produtos.OrderBy(p => p.GetNome()).ToList();
                break;
        }
    }

    private string GetFirstWord(string nome)
    {
        var words = nome.Split(' ');

        var name = words.FirstOrDefault() ?? nome;
        switch (name)
        {
            case "Cadeira":
                return "Cadeira";
            case "Mesa":
                return "Mesa";
            case "Estante":
                return "Estante";
            case "Banco":
                return "Banco";
            case "Estrutura":
                return "Cama";
            default:
                return nome;
        }
    }
}
