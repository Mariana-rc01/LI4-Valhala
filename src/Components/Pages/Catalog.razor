@page "/catalog"
@using System.Security.Claims
@using Valhala.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@using MudBlazor
@using Valhala.Controller.Data
@using Microsoft.AspNetCore.Components
@using Valhala.Controller.UI
@using Valhala.Components.Layout
@using Valhala.Controller.Products

@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime


<PageTitle>Catálogo</PageTitle>

<MudText Typo="Typo.h4">Catálogo</MudText>

<MudPaper Class="white-container" Elevation="3" style="margin-top: 15px;">
    <MudContainer MaxWidth="MaxWidth.Large" style="justify-content: center;">
        <MudGrid>
            @foreach (var produto in Produtos)
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Style="width: 200px; text-align: center; bottom-align:center ;">
                        <div style="display: flex; justify-content: center; align-items: center;">
                            <MudImage Src="@produto.GetImagem()" Height="250" Width="250"
                                Style="border: 2px solid #ccc; border-radius: 8px;" />
                        </div>
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@GetLastWord(produto.GetNome())</MudText>
                            <MudText Typo="Typo.body2">@GetFirstWord(produto.GetNome())</MudText>
                            <MudText Typo="Typo.body2">@produto.GetPreco() €</MudText>
                        </MudCardContent>
                        <MudCardActions Style="justify-content: center;">
                            <MudButton Color="Color.Primary" Variant="Variant.Filled"
                                OnClick="() => VerDetalhes(produto.GetID())">
                                Ver Detalhes
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

    </MudContainer>
</MudPaper>

<style>
    .white-container {
        background-color: white;
        padding: 16px;
        border-radius: 8px;
    }
</style>


@code {
    private List<Produto> Produtos = new List<Produto>();

    protected override void OnInitialized()
    {
        Produtos = ProdutoDAO.GetInstance().ListarProdutos();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
document.body.style.userSelect = 'none';
document.body.style.cursor = 'default';
");
        }
    }

    private void VerDetalhes(int id)
    {
        NavManager.NavigateTo($"/produto/{id}");
    }

    private string GetLastWord(string nome)
    {
        var words = nome.Split(' ');
        return words.LastOrDefault() ?? nome;
    }

    private string GetFirstWord(string nome)
    {
        var words = nome.Split(' ');

        var name = words.FirstOrDefault() ?? nome;
        switch (name)
        {
            case "Cadeira":
                return "Cadeira";
            case "Mesa":
                return "Mesa";
            case "Estante":
                return "Estante";
            case "Banco":
                return "Banco";
            case "Estrutura":
                return "Cama";
            default:
                return nome;
        }
    }
}