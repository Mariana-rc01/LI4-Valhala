@page "/"

@using System.Security.Claims
@using Valhala.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@using MudBlazor
@using Valhala.Controller.Data
@using Microsoft.AspNetCore.Components
@using Valhala.Controller.UI
@using Valhala.Components.Layout
@using Valhala.Controller.Products
@layout HomeLayout

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime js
@inject UIService UIService
@inject IJSRuntime JSRuntime


<PageTitle>Catálogo</PageTitle>

<!-- Scroll container to enable scroll-snap -->
    <div class="scroll-container" style="display: flex; flex-direction: column;">
        
        <div class="relative bg-[#0d051b]" 
            style="flex: 0 0 auto; height: 100vh; position: relative; background-image: url('images/background.svg'); background-size: cover; background-position: center; background-repeat: no-repeat;">
          
            <!-- Valhala Image -->
            <img src="images/valhala.svg" style="position: absolute; top: 20px; left: 50px;" class="select-none" />

            <!-- MudFab Button -->
            <div style="position: absolute; top: 20px; right: 20px;" class="flex flex-row items-center gap-12">
                <p class="text-white font-semibold hover:cursor-pointer" @onclick="ScrollToCatalogo">
                    Catálogo
                </p>
                <MudFab Color="Color.Success" class="px-6" Variant="Variant.Filled" Label="Log in" OnClick="Login" />
            </div>

            <div style="position: absolute; top: 45%; left: 32%; transform: translate(-50%, -50%); text-align: center;">
                <img src="images/letras.svg" style="width: 75%;" />
            </div>
        </div>

        <!-- Catálogo Section with an ID for scrolling -->
        <div id="catalogo-section" style="margin-top: 35px;" class="px-15 py-7">
            <MudText Typo="Typo.h4">
                Catálogo
            </MudText>

            <div class="flex justify-between items-center flex-row w-full">
                <MudText>
                    A nossa seleção de produtos, repletos de qualidade, estética e conforto.
                </MudText>
                <MudMenu>
                    <ActivatorContent>
                        <MudButton Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowDropDown" Size="Size.Medium" Variant="Variant.Filled" Class="rounded-full">
                            Ordenar Catálogo
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="@(() => OrderCatalog("pa"))">
                            Preço ascendente
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OrderCatalog("pd"))">
                            Preço descendente
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OrderCatalog("pp"))">
                            Popularidade
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OrderCatalog("a"))">
                            Ordem alfabética
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>

            <MudPaper class="py-24" Elevation="0"
                style="margin-top: 45px; background-color: #e4f6f6; border-radius: 10px;">

                <MudContainer MaxWidth="MaxWidth.Large" style="justify-content: center;">
                    <MudGrid>
                        @foreach (var produto in Produtos)
                        {
                            <MudItem xs="12" sm="6" md="3">
                                <MudCard Outlined="false" border="0" Elevation="0"
                                    Style="width: 200px; text-align: center; bottom-align:center ; border: 0; background-color: #e4f6f6;" @onclick="() => VerDetalhes(produto.GetID())" class="hover:cursor-pointer">
                                    <div style="display: flex; justify-content: center; align-items: center;" class="bg-[#ffffff] rounded-lg">
                                        <MudImage Src="@produto.GetImagem()" Height="250" Width="250"
                                            Style="border: 2px solid #ccc; border-radius: 8px;" class="p-4" />
                                    </div>
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6" class="font-semibold">@GetLastWord(produto.GetNome())</MudText>
                                        <MudText Typo="Typo.body2">@GetFirstWord(produto.GetNome())</MudText>
                                        <MudText Typo="Typo.body2" class="font-bold text-xl">@produto.GetPreco() €</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                </MudContainer>
            </MudPaper>
        </div>

    </div>

@code {
    private List<Produto> Produtos = new List<Produto>();

    private string? UserRole => userSession?.Role;

    private UserSession userSession;
    protected override void OnInitialized()
    {
        Produtos = ProdutoDAO.GetInstance().ListarProdutos();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
document.body.style.userSelect = 'none';
document.body.style.cursor = 'default';
");
        }
    }

    private void VerDetalhes(int id)
    {
        NavManager.NavigateTo($"/produto/{id}");
    }

    private void Login()
    {
        NavManager.NavigateTo("/login");
    }
      
    private void OrderCatalog(string order){
        switch(order){
            case "pa":
                Produtos = Produtos.OrderBy(p => p.GetPreco()).ToList();
                break;
            case "pd":
                Produtos = Produtos.OrderByDescending(p => p.GetPreco()).ToList();
                break;
            case "pp":
                Produtos = Produtos.OrderByDescending(p => p.GetVendas()).ToList();
                break;
            case "a":
                Produtos = Produtos.OrderBy(p => p.GetNome()).ToList();
                break;
        }
    }

    protected override async Task OnInitializedAsync(){
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        var id = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var name = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        var role = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

        if (id != null && name != null && role != null)
        {
            userSession = new UserSession(int.Parse(id), name, role);
        }
        else
        {
            userSession = null;
        }

    }
    private string GetLastWord(string nome)
    {
        var words = nome.Split(' ');
        return words.LastOrDefault() ?? nome;
    }

    private string GetFirstWord(string nome)
    {
        var words = nome.Split(' ');

        var name = words.FirstOrDefault() ?? nome;
        switch (name)
        {
            case "Cadeira":
                return "Cadeira";
            case "Mesa":
                return "Mesa";
            case "Estante":
                return "Estante";
            case "Banco":
                return "Banco";
            case "Estrutura":
                return "Cama";
            default:
                return nome;
        }
    }

    private async Task ScrollToCatalogo()
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
document.getElementById('catalogo-section').scrollIntoView({
behavior: 'smooth',
block: 'start'
});
");
    }
}
