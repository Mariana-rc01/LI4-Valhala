@page "/addProduct"
@using MudBlazor
@using Valhala.Controller.Data
@using Valhala.Controller.Products
@inject NavigationManager NavManager

<PageTitle>Adicionar Produto</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">

    <!-- Formulários para cada etapa -->
    <MudStepper ActiveStepIndex="@currentStep">
        <MudStep StepContent="Dados do Produto" />
        <MudStep StepContent="Peças" />
        <MudStep StepContent="Linha de Montagem" />
    </MudStepper>

    <MudDialog>
        <MudDialogContent>
            @switch(currentStep)
            {
                case 0:
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="newProductName" Label="Nome do Produto" FullWidth />
                            <MudTextField @bind-Value="newProductPrice" Label="Preço (€)" FullWidth />
                            <MudTextField @bind-Value="newProductDescription" Label="Descrição" FullWidth Multiline />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="newProductImage" Label="Caminho da Imagem" FullWidth />
                            <MudImage Src="@newProductImage" Alt="Imagem do Produto" Style="width: 100%; border: 2px dashed gray;" />
                        </MudItem>
                    </MudGrid>
                    break;
                case 1:
                    <MudText Typo="Typo.h6" Class="mb-2">Selecione as Peças</MudText>
                    <MudSelect T="Peca" @bind-Value="selectedPiece" Label="Peça" Dense="true" FullWidth>
                        @foreach (var piece in availablePieces)
                        {
                            <MudSelectItem T="Peca" Value="piece">@piece.GetID()</MudSelectItem>
                        }
                    </MudSelect>
                    break;
                case 2:
                    <MudText Typo="Typo.h6" Class="mb-2">Configurar Etapas da Linha de Montagem</MudText>
                    <MudTextField @bind-Value="stepID" Label="ID da Etapa" FullWidth />
                    <MudTextField @bind-Value="stepImage" Label="Imagem da Etapa" FullWidth />
                    <MudTextField @bind-Value="stepProductID" Label="ID do Produto na Etapa" FullWidth />
                    <MudTextField @bind-Value="stepPieces" Label="Peças Usadas na Etapa" FullWidth />
                    break;
            }
        </MudDialogContent>
        <MudDialogActions>
            <MudButton OnClick="GoToPreviousStep" Disabled="currentStep == 0">Voltar</MudButton>
            @if (currentStep < 2)
            {
                <MudButton OnClick="GoToNextStep">Próximo</MudButton>
            }
            else
            {
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveProduct">Salvar</MudButton>
            }
        </MudDialogActions>
    </MudDialog>
</MudContainer>

@code {
    private int currentStep = 0;
    private string newProductName;
    private decimal newProductPrice;
    private string newProductDescription;
    private string newProductImage;
    private Peca selectedPiece;
    private string stepID;
    private string stepImage;
    private string stepProductID;
    private string stepPieces;

    private List<Peca> availablePieces = new List<Peca>(); // Lista de peças pré-existentes
    private TimelinePosition _position = TimelinePosition.Start;
    private TimelineOrientation _orientation = TimelineOrientation.Vertical;
    private bool _reverse;

    protected override async Task OnInitializedAsync()
    {
        // Simular busca de peças existentes no sistema
        availablePieces = PecaDAO.GetInstance().List(); // Substitua pelo seu DAO real
    }

    private void OnOrientationChange(TimelineOrientation value)
    {
        _orientation = value;
        switch (value)
        {
            case TimelineOrientation.Vertical:
                if (_position is TimelinePosition.Top or TimelinePosition.Bottom)
                    _position = TimelinePosition.Start;
                break;
            case TimelineOrientation.Horizontal:
                if (_position is TimelinePosition.Start or TimelinePosition.Left or TimelinePosition.Right or TimelinePosition.End)
                    _position = TimelinePosition.Top;
                break;
        }
    }

    private void GoToNextStep()
    {
        if (currentStep < 2)
            currentStep++;
    }

    private void GoToPreviousStep()
    {
        if (currentStep > 0)
            currentStep--;
    }

    private void SaveProduct()
    {
        // Lógica para salvar o produto, peças e etapa
        // Exemplo de produto e etapas salvos
        Produto newProduct = new Produto(newProductName, newProductPrice, newProductDescription, newProductImage);
        ProdutoDAO.GetInstance().Put(newProduct.GetID(),newProduct); // Substitua com a lógica real para salvar o produto

        // Redireciona para a página de catálogo após salvar
        NavManager.NavigateTo("/catalog");
    }

    private bool IsSwitchDisabled()
    {
        if (_position == TimelinePosition.Alternate)
            return false;
        else
            _reverse = false;
        return true;
    }
}
