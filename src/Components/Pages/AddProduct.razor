@page "/addProduct"
@using MudBlazor
@using Valhala.Controller.Data
@using Valhala.Controller.Products
@inject NavigationManager NavManager

<PageTitle>Adicionar Produto</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Style="width: 800px">
        <MudStepper CenterLabels="true" ShowResetButton @bind-CurrentStep="currentStep">
            <!-- Etapa 1: Produto -->
            <MudStep Title="Dados do Produto" Completed="@(currentStep > 0)">
                    <MudGrid>
                        <!-- Imagem -->
                        <MudItem xs="12" sm="6">
                            <MudCard>
                                @if (!string.IsNullOrEmpty(imagePreview))
                                {
                                    <MudCardMedia Image="@imagePreview" Alt="Pré-visualização da Imagem" />
                                }
                            </MudCard>
                        </MudItem>

                        <!-- Dados -->
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="newProductName" Label="Nome do Produto" FullWidth />
                            <MudTextField @bind-Value="newProductPrice" Label="Preço (€)" FullWidth />
                            <MudTextField @bind-Value="newProductDescription" Label="Descrição" FullWidth Multiline />
                            <MudTextField @bind-Value="newProductImage" Label="Path da Imagem" FullWidth />
                            

                            <MudButton OnClick="PreviewImage" Variant="Variant.Filled" Color="Color.Primary">Pré-visualizar Imagem</MudButton>
                        </MudItem>
                    </MudGrid>
            </MudStep>

            <!-- Etapa 2: Peças -->
            <MudStep Title="Peças" SecondaryText="Escolha as peças" Skippable="true" Completed="@(currentStep > 1)">
                    <MudText Typo="Typo.h6" Class="mb-2">Selecione as Peças para o Produto</MudText>
                    
                    @if (availablePieces.Count > 0)
                    {
                        <MudSelect T="int" @bind-Value="selectedPiece" Label="Peça" Dense="true" FullWidth>
                            @foreach (var piece in availablePieces)
                            {
                                <MudSelectItem T="int" Value="piece.GetID()">@piece.GetID()</MudSelectItem>
                            }
                        </MudSelect>

                        <MudButton OnClick="AddPieceToProduct" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-2">Adicionar Peça ao Produto</MudButton>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Color="Color.Error">Nenhuma peça disponível para seleção.</MudText>
                    }

                    <MudText Typo="Typo.h6" Class="mt-4">Peças Adicionadas ao Produto:</MudText>
                    <MudList T="int">
                        @foreach (var pieceID in productPieceIDs)
                        {
                            <MudListItem T="int">@pieceID</MudListItem>  <!-- Mostrando o ID da peça -->
                        }
                    </MudList>
            </MudStep>

            <!-- Etapa 3: Linha de Montagem -->
           <MudStep Title="Linha de Montagem" SecondaryText="Configure a montagem" Completed="@(currentStep > 2)">
                <MudText Typo="Typo.h6" Class="mb-2">Configurar Etapas da Linha de Montagem</MudText>

                <!-- Etapa -->
                <MudTextField @bind-Value="stepID" Label="ID da Etapa" FullWidth />  <!-- stepID é agora int -->

                <!-- Imagem da etapa -->
                <MudTextField @bind-Value="stepImagePath" Label="Imagem da Etapa" FullWidth />

                <!-- Mostra a imagem -->
                @if (!string.IsNullOrEmpty(stepImagePreview))
                {
                    <MudCard>
                        <MudCardMedia Image="@stepImagePreview" Alt="Imagem da Etapa" />
                    </MudCard>
                }

                <MudText Typo="Typo.h6" Class="mt-2">Peças para esta Etapa:</MudText>
                <MudSelect T="int" @bind-Value="selectedStepPieceID" Label="Selecione uma Peça" Dense="true" FullWidth>
                    @foreach (var pieceID in productPieceIDs)
                    {
                        <MudSelectItem T="int" Value="pieceID">@pieceID</MudSelectItem>  <!-- Mostrando o ID da peça -->
                    }
                </MudSelect>

                <MudButton OnClick="AddPieceToStep" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-2">Adicionar Peça à Etapa</MudButton>

                <MudText Typo="Typo.h6" Class="mt-4">Peças na Etapa:</MudText>
                <MudList T="int">
                    @if (stepPiecesMap.ContainsKey(stepID))
                    {
                        foreach (var pieceID in stepPiecesMap[stepID])
                        {
                            <MudListItem T="int">@pieceID</MudListItem>  <!-- Mostrando o ID da peça -->
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Color="Color.Error">Nenhuma peça adicionada a esta etapa.</MudText>
                    }
                </MudList>

                <MudButton OnClick="AddStep" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">Adicionar Etapa</MudButton>
                
                <!-- Etapas adicionadas com as peças -->
                @if (stepPiecesMap.Any())
                {
                    <MudText Typo="Typo.h6" Class="mt-4">Etapas e suas Peças:</MudText>
                    <MudList T="int">
                    @foreach (var step in stepPiecesMap)
                    {
                        <MudListItem T="int"> <!-- MudListItem especifica que o tipo é inteiro -->
                            Etapa @step.Key - Peças: 
                            @foreach (var pieceID in step.Value)
                            {
                                <span>@pieceID </span>
                            }
                        </MudListItem>
                    }
                </MudList>
                }
            </MudStep>

        </MudStepper>
    </MudPaper>
</MudContainer>

@code {
    private int currentStep = 0;
    private string newProductName;
    private decimal newProductPrice;
    private string newProductDescription;
    private string newProductImage;
    private int selectedPiece;
    private int selectedStepPieceID;
    private int stepID;
    private string imagePreview;
    private string stepImagePath;
    private string stepImagePreview;
    private List<Peca> availablePieces = new List<Peca>();
    private List<int> productPieceIDs = new List<int>();
    private Dictionary<int, List<int>> stepPiecesMap = new Dictionary<int, List<int>>();
    private List<Etapa> etapas = new List<Etapa>();

    private Etapa selectedStep;

    protected override async Task OnInitializedAsync()
    {
        availablePieces = PecaDAO.GetInstance().List();
    }
    private void PreviewImage()
    {
        imagePreview = newProductImage;
    }
    private void PreviewStepImage()
    {
        stepImagePreview = stepImagePath;
    }
    private void AddPieceToProduct()
    {
        if (selectedPiece != 0 && !productPieceIDs.Contains(selectedPiece))
        {
            productPieceIDs.Add(selectedPiece);
        }
    }
    private void SelectStep()
    {
        selectedStep = etapas.FirstOrDefault(e => e.ID == stepID);
    }
    private void AddStep()
    {
        if (!stepPiecesMap.ContainsKey(stepID))
        {
            stepPiecesMap[stepID] = new List<int>();
        }

        stepID = 0;
    }

    private void AddPieceToStep()
    {
        if (!stepPiecesMap.ContainsKey(stepID))
        {
            stepPiecesMap[stepID] = new List<int>();
        }

        stepPiecesMap[stepID].Add(selectedStepPieceID);

        selectedStepPieceID = 0;
    }

}
