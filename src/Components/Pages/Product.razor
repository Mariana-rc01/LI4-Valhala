@page "/produto/{ProdutoID:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.Security.Claims
@using Valhala.Controller.Data
@using Valhala.Controller.Products
@inject NavigationManager NavManager
@using Valhala.Authentication
@using Microsoft.AspNetCore.Components
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Detalhes do Produto</PageTitle>

<!-- Janela para confirmar deletion -->
@if (DeleteDialogOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg max-w-sm w-full">
            <h3 class="text-xl font-semibold text-red-500">Aviso</h3>
            <p class="mt-4">Tem a certeza que deseja eliminar este produto?</p>
            <div class="mt-6 flex justify-end">
                <button class="bg-black text-white py-2 px-4 rounded-full" @onclick="CancelDelete">Cancelar</button>
                <button class="bg-red-500 text-white py-2 px-4 rounded-full ml-4" @onclick="ConfirmDelete">Eliminar</button>
            </div>
        </div>
    </div>
}

<div>
    @if (Produto == null)
    {
        <MudText Typo="Typo.h5" Color="Color.Error">Produto não encontrado.</MudText>
    }
    else
    {
        @if (UserRole == null)
        {
            <div style="
                background-color: #38A3A5; 
                border-radius: 15px; 
                padding: 20px; 
                max-width: 900px; 
                margin: auto; 
                color: white;">
                <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4" Style="background-color: transparent;">
                    <MudGrid>
                        <!-- Imagem do Produto -->
                        <MudItem xs="12" md="6" Style="display: flex; justify-content: center;">
                            <MudImage Src="@Produto.GetImagem()" Alt="Imagem do produto" 
                                      Style="width: 80%; border-radius: 10px;" />
                        </MudItem>

                        <!-- Detalhes do Produto -->
                        <MudItem xs="12" md="6">
                            <!-- Última palavra em cima -->
                            <MudText Typo="Typo.h1" Class="mb-0" Style="font-size: 45px; font-weight: bold; color: white;">
                                @GetLastWord(Produto.GetNome())
                            </MudText>
                            <!-- Restante do nome -->
                            <MudText Typo="Typo.h2" Style="font-size: 30px; color: white;">
                                @GetRemainingWords(Produto.GetNome())
                            </MudText>
                            <!-- Preço -->
                            <MudText Typo="Typo.h1" Style="font-size: 50px; font-weight: bold; color: white;" Class="mt-2">
                                @($"{(Produto.GetPreco() % 1 == 0 ? Produto.GetPreco().ToString("F0") : Produto.GetPreco())}€")
                            </MudText>

                            <!-- Descrição -->
                            <MudText Typo="Typo.body1" Class="mt-6" Style="color: white;">
                                @Produto.GetDescricao()
                            </MudText>

                            <!-- Identificador -->
                            <div style="margin-top: 40px;">
                                <MudText Typo="Typo.subtitle2" Style="font-size: 12px; color: white;">Identificador</MudText>
                                <div style="
                                    background-color: rgba(255, 255, 255, 0.2); 
                                    color: white; 
                                    text-align: center; 
                                    padding: 5px 10px; 
                                    border-radius: 10px; 
                                    font-size: 12px; 
                                    width: 150px;
                                    margin-top: 5px;">
                                    @Produto.GetID()
                                </div>
                            </div>
                        </MudItem>
                    </MudGrid>
                </MudContainer>
            </div>
        }
        else
        {
            <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
                <MudGrid>
                    <!-- Imagem do Produto -->
                    <MudItem xs="12" md="6" Style="display: flex; justify-content: center;">
                        <MudImage Src="@Produto.GetImagem()" Alt="Imagem do produto" 
                                  Style="width: 80%; border-radius: 10px;" />
                    </MudItem>

                    <!-- Detalhes do Produto -->
                    <MudItem xs="12" md="6">
                        <!-- Última palavra em cima -->
                        <MudText Typo="Typo.h1" Class="mb-0" Style="font-size: 45px; font-weight: bold;">
                            @GetLastWord(Produto.GetNome())
                        </MudText>
                        <!-- Restante do nome -->
                        <MudText Typo="Typo.h2" Style="font-size: 30px;">
                            @GetRemainingWords(Produto.GetNome())
                        </MudText>
                        <!-- Preço -->
                        <MudText Typo="Typo.h1" Style="font-size: 50px; font-weight: bold;" Class="mt-2">
                            @($"{(Produto.GetPreco() % 1 == 0 ? Produto.GetPreco().ToString("F0") : Produto.GetPreco())}€")
                        </MudText>

                        <!-- Descrição -->
                        <MudText Typo="Typo.body1" Class="mt-6">
                            @Produto.GetDescricao()
                        </MudText>

                        <!-- Identificador e encomendas -->
                        <div style="margin-top: 40px; display: flex; align-items: center; gap: 20px;">
                            <div>
                                <MudText Typo="Typo.subtitle2" Style="font-size: 12px;">Identificador</MudText>
                                <div style="
                                    background-color: rgba(13, 5, 27, 0.8); 
                                    color: white; 
                                    text-align: center; 
                                    padding: 5px 10px; 
                                    border-radius: 10px; 
                                    font-size: 12px; 
                                    width: 150px;
                                    margin-top: 5px;">
                                    @Produto.GetID()
                                </div>
                            </div>

                            @if (IsFuncionario() || IsGestor())
                            {
                                <div>
                                    <MudText Typo="Typo.subtitle2" Style="font-size: 12px;">Nº Encomendas</MudText>
                                    <div style="
                                        background-color: rgba(13, 5, 27, 0.8); 
                                        color: white; 
                                        text-align: center; 
                                        padding: 5px 10px; 
                                        border-radius: 10px; 
                                        font-size: 12px; 
                                        width: 150px;
                                        margin-top: 5px;">
                                        @GetTotalEncomendas()
                                    </div>
                                </div>
                            }
                        </div>

                        <div style="display: flex; align-items: center; gap: 20px; margin-top: 40px;">
                            <!-- Botão de Montagem -->
                            <MudButton Style="background-color: rgba(56, 163, 165, 0.8); color: white; font-weight: bold; font-size: 18px; padding: 20px 32px;" 
                                    Variant="Variant.Filled" OnClick="NavigateToMontagem">
                                Montagem
                            </MudButton>

                            <!-- Botão de Eliminar Produto -->
                            @if (IsGestor())
                            {
                                <div style="
                                    width: 45px;
                                    height: 45px;
                                    background-color: #DE5656;
                                    border-radius: 50%;
                                    display: flex;
                                    justify-content: center;
                                    align-items: center;
                                    cursor: pointer;"
                                    @onclick="OpenDeleteConfirmation">

                                    <!-- Traço horizontal branco -->
                                    <div style="
                                        width: 20px;
                                        height: 2.5px;
                                        background-color: white;"></div>
                                </div>
                            }
                        </div>

                    </MudItem>
                </MudGrid>
            </MudContainer>
        }
    }
</div>

@code {
    [Parameter] public int ProdutoID { get; set; }
    private Produto? Produto { get; set; }
    private bool DeleteDialogOpen { get; set; }
    private string? UserRole => userSession?.Role;
    private UserSession? userSession;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        var id = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var name = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        var role = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

        if (id != null && name != null && role != null)
        {
            userSession = new UserSession(int.Parse(id), name, role);
        }
        else
        {
            userSession = null;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(() => 
        {
            Produto = ProdutoDAO.GetInstance().Get(ProdutoID);
        });
    }

    private void NavigateToMontagem()
    {
        NavManager.NavigateTo($"/montagem/{ProdutoID}");
    }

    private string GetLastWord(string nome)
    {
        var words = nome.Split(' ');
        return words.LastOrDefault() ?? nome;
    }

    private string GetRemainingWords(string nome)
    {
        var words = nome.Split(' ');
        return string.Join(' ', words.Take(words.Length - 1));
    }

    private bool IsFuncionario() => userSession?.Role == "Funcionario";

    private bool IsGestor() => userSession?.Role == "Gestor";

    private int GetTotalEncomendas() => EncomendaDAO.GetInstance().GetCountByProdutoID(ProdutoID);

    private void OpenDeleteConfirmation() => DeleteDialogOpen = true;

    private void CancelDelete() => DeleteDialogOpen = false;

    private void ConfirmDelete()
    {
        ProdutoDAO.GetInstance().Delete(ProdutoID);
        NavManager.NavigateTo("/catalog");
    }
}
